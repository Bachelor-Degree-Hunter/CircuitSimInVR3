using System;
using UnityEngine;
using TMPro;
using System.Collections;
using UnityEngine.Networking;
using UnityEngine.SceneManagement;

public class GoogleAuthen : MonoBehaviour
{
    public TMP_Text statusText;
    private string clientId = "382397535757-jlr6pk7k9ibtdja6mustqm1p426t4c1j.apps.googleusercontent.com";
    private string redirectUri = "http://localhost:3000/callback";
    private string authUrl;
    private string serverUrl = "http://localhost:3000/register";
    public string nextScene = "MainScene";
    public string loginScene = "LoginScene"; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

    void Start()
    {
        authUrl = "https://accounts.google.com/o/oauth2/auth" +
                  "?client_id=" + clientId +
                  "&redirect_uri=" + Uri.EscapeDataString(redirectUri) +
                  "&response_type=token" +
                  "&scope=email%20profile%20openid" +
                  "&prompt=select_account"; // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        ;

        Application.deepLinkActivated += OnDeepLink;
    }

    public void OnSignIn()
    {
        Debug.Log("üîπ Opening Google Login: " + authUrl);
        Application.OpenURL(authUrl);
    }

    public void OnLogout()
    {
        Debug.Log("üîπ Logging out...");

        // ‚úÖ ‡∏•‡∏ö Token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
        PlayerPrefs.DeleteKey("accessToken");
        PlayerPrefs.Save();

        // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Google Logout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        //Application.OpenURL("https://accounts.google.com/logout");

        // ‚úÖ ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        StartCoroutine(LogoutAndSwitchScene());
    }

    IEnumerator LogoutAndSwitchScene()
    {
        yield return new WaitForSeconds(2);
        SceneManager.LoadScene(loginScene);
    }


    void OnDeepLink(string url)
    {
        Debug.Log("üîπ Received Deep Link: " + url);
        string token = ExtractTokenFromURL(url);

        if (!string.IsNullOrEmpty(token))
        {
            Debug.Log("‚úÖ Extracted Token: " + token);
            PlayerPrefs.SetString("accessToken", token); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö Token ‡πÑ‡∏ß‡πâ
            PlayerPrefs.Save();
            StartCoroutine(SendUserDataToServer(token));
        }
        else
        {
            Debug.LogError("‚ùå Failed to extract token from URL");
            UpdateStatusText("‚ùå Token extraction failed.");
        }
    }

    IEnumerator SendUserDataToServer(string accessToken)
    {
        WWWForm form = new WWWForm();
        form.AddField("accessToken", accessToken);

        using (UnityWebRequest request = UnityWebRequest.Post(serverUrl, form))
        {
            request.SetRequestHeader("Content-Type", "application/json");
            yield return request.SendWebRequest();

            if (request.result != UnityWebRequest.Result.Success)
            {
                Debug.LogError("‚ùå Failed to send user data: " + request.error);
                UpdateStatusText("‚ùå Failed to send data: " + request.error);
            }
            else
            {
                Debug.Log("‚úÖ User data sent successfully: " + request.downloadHandler.text);
                UpdateStatusText("‚úÖ Login successful!");
                yield return new WaitForSeconds(1f);
                SceneManager.LoadScene(nextScene);
            }
        }
    }

    string ExtractTokenFromURL(string url)
    {
        Uri uri = new Uri(url);
        string fragment = uri.Fragment;

        if (fragment.StartsWith("#"))
        {
            fragment = fragment.Substring(1);
        }

        var queryParams = fragment.Split('&');
        foreach (string param in queryParams)
        {
            string[] keyValue = param.Split('=');
            if (keyValue.Length == 2 && keyValue[0] == "access_token")
            {
                return keyValue[1];
            }
        }
        return null;
    }

    void UpdateStatusText(string message)
    {
        if (statusText != null)
        {
            statusText.text = message;
        }
    }
}
