using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;

public class ChallengeManager2 : MonoBehaviour
{
    [Header("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏à‡∏ó‡∏¢‡πå (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Gate ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)")]
    public bool requireAndGate = false;
    public bool requireOrGate = false;
    public bool requireNandGate = false;
    public bool requireNorGate = false;
    public bool requireXorGate = false;
    public bool requireXnorGate = false;
    public bool requireNotGate = false;

    [Header("‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")]
    public LED ledToCheck; // ‡πÉ‡∏ä‡πâ LED ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    public ToggleSwitch[] toggleSwitches = new ToggleSwitch[4]; // 4 Toggle Switch ‡πÅ‡∏ó‡∏ô‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô 2
    public List<int> targetNumbers = new List<int>(); // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ Toggle Switch ‡∏ó‡∏≥‡πÉ‡∏´‡πâ LED ‡∏ï‡∏¥‡∏î

    [Header("UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")]
    public Text targetNumbersText; // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å

    private int score = 0; // ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    private bool hasUserInteracted = false; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ö‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    void Start()
    {
        UpdateUI();
    }

    void Update()
    {
        if (!hasUserInteracted)
        {
            hasUserInteracted = CheckUserInteraction(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ö‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        }

        if (hasUserInteracted)
        {
            CheckChallengeCompletion();
        }
    }

    void UpdateUI()
    {
        if (targetNumbersText != null)
        {
            targetNumbersText.text = $"Target Numbers: {string.Join(", ", targetNumbers)}";
        }

        Debug.Log($"üìå ‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á: {string.Join(", ", targetNumbers)}");
    }

    bool CheckUserInteraction()
    {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Toggle Switch ‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡πâ‡∏≤‡∏á
        foreach (var toggle in toggleSwitches)
        {
            if (toggle != null && toggle.isOn)
            {
                return true; // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ö‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡πÅ‡∏•‡πâ‡∏ß
            }
        }
        return false; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ö‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå
    }

    void CheckChallengeCompletion()
    {
        if (toggleSwitches.Length == 4)
        {
            bool isGateCorrect = CheckGatePresence();
            bool isOutputCorrect = CheckToggleSwitches(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LED ‡∏ï‡∏¥‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            bool isConnectionCorrect = CheckConnections(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≤‡∏¢‡πÑ‡∏ü

            score = CalculateScore(isOutputCorrect, isConnectionCorrect, isGateCorrect);

            bool isComplete = isOutputCorrect && isConnectionCorrect && isGateCorrect;
            Debug.Log(isComplete ? $"‚úÖ ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score}" : $"‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score}");
        }
    }

    bool CheckToggleSwitches()
    {
        int switchValue = 0;
        for (int i = 0; i < 4; i++)
        {
            if (toggleSwitches[i] != null && toggleSwitches[i].isOn)
            {
                switchValue |= (1 << i); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ Binary ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏ê‡∏≤‡∏ô 10
            }
        }

        bool isLEDOn = ledToCheck.input.isOn; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LED ‡∏ï‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        bool shouldLEDBeOn = targetNumbers.Contains(switchValue); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LED ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

        Debug.Log($"üîç ‡∏Ñ‡πà‡∏≤ Toggle Switch: {switchValue} | ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: {string.Join(", ", targetNumbers)} | LED ‡∏ï‡∏¥‡∏î: {isLEDOn}");

        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà LED ‡∏ï‡∏¥‡∏î‡∏ú‡∏¥‡∏î (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô targetNumbers ‡πÅ‡∏ï‡πà‡∏ï‡∏¥‡∏î)
        if (isLEDOn && !shouldLEDBeOn)
        {
            return false;
        }

        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà LED ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î
        if (!isLEDOn && shouldLEDBeOn)
        {
            return false;
        }

        return true;
    }

    bool CheckConnections()
    {
        bool isConnected = false;

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        WireManager[] wireManagers = FindObjectsOfType<WireManager>();

        foreach (var wireManager in wireManagers)
        {
            foreach (var connection in wireManager.GetWireConnections())
            {
                OutputConnector output = connection.Key.Item1;
                InputConnector input = connection.Key.Item2;

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á LED ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (input == ledToCheck.input)
                {
                    isConnected = true;
                    break;
                }
            }
        }

        Debug.Log(isConnected ? "‚úÖ LED ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ß‡∏á‡∏à‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" : "‚ùå LED ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ß‡∏á‡∏à‡∏£");

        return isConnected;
    }


    bool CheckGatePresence()
    {
        int requiredGateCount = 0;
        int foundGateCount = 0;

        if (requireAndGate) { requiredGateCount++; if (FindObjectsOfType<AndGate>().Length > 0) foundGateCount++; }
        if (requireOrGate) { requiredGateCount++; if (FindObjectsOfType<OrGate>().Length > 0) foundGateCount++; }
        if (requireNandGate) { requiredGateCount++; if (FindObjectsOfType<NandGate>().Length > 0) foundGateCount++; }
        if (requireNorGate) { requiredGateCount++; if (FindObjectsOfType<NorGate>().Length > 0) foundGateCount++; }
        if (requireXorGate) { requiredGateCount++; if (FindObjectsOfType<XorGate>().Length > 0) foundGateCount++; }
        if (requireXnorGate) { requiredGateCount++; if (FindObjectsOfType<XnorGate>().Length > 0) foundGateCount++; }
        if (requireNotGate) { requiredGateCount++; if (FindObjectsOfType<NotGate>().Length > 0) foundGateCount++; }

        return requiredGateCount == 0 || foundGateCount > 0;
    }

    int CalculateScore(bool isOutputCorrect, bool isConnectionCorrect, bool isGateCorrect)
    {
        int baseScore = 0;

        if (isOutputCorrect)
        {
            baseScore += 30; // ‡∏ñ‡πâ‡∏≤ LED ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ 30 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        }
        else
        {
            baseScore -= 10; // ‡∏ñ‡πâ‡∏≤ LED ‡∏ú‡∏¥‡∏î ‡∏´‡∏±‡∏Å 10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        }

        if (isConnectionCorrect)
        {
            baseScore += 20; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ 20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        }
        else
        {
            baseScore -= 10; // ‡∏ñ‡πâ‡∏≤‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏ú‡∏¥‡∏î ‡∏´‡∏±‡∏Å 10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        }

        if (isGateCorrect)
        {
            baseScore += 15; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Logic Gate ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ 15 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        }
        else if (requireAndGate || requireOrGate || requireNandGate || requireNorGate || requireXorGate || requireXnorGate || requireNotGate)
        {
            baseScore -= 10; // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Gate ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏¢ ‡∏´‡∏±‡∏Å 10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        }

        return Mathf.Max(0, baseScore);
    }
}
