using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;

public class ChallengeManager1 : MonoBehaviour
{
    [Header("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏à‡∏ó‡∏¢‡πå (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Gate ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)")]
    public bool requireAndGate = false;
    public bool requireOrGate = false;
    public bool requireNandGate = false;
    public bool requireNorGate = false;
    public bool requireXorGate = false;
    public bool requireXnorGate = false;
    public bool requireNotGate = false;

    [Header("‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")]
    public LED ledToCheck; // LED ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

    [Header("UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ToggleSwitch (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")]
    public Text toggleSwitchCountText; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ToggleSwitch ‡∏ö‡∏ô UI

    private int score = 0; // ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

    void Start()
    {
        UpdateUI();
    }

    void Update()
    {
        CheckChallengeCompletion();
    }

    void UpdateUI()
    {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô UI ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Text
        int switchCount = FindObjectsOfType<ToggleSwitch>().Length;
        if (toggleSwitchCountText != null)
        {
            toggleSwitchCountText.text = $"Toggle Switch: {switchCount}";
        }
        Debug.Log($"üìå ‡∏û‡∏ö ToggleSwitch ‡πÉ‡∏ô Scene: {switchCount} ‡∏ï‡∏±‡∏ß");
    }

    void CheckChallengeCompletion()
    {
        if (ledToCheck != null && ledToCheck.input != null)
        {
            bool isLEDOn = ledToCheck.input.isOn;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Logic Gate ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            bool isGateCorrect = CheckGatePresence();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Output ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            bool isOutputCorrect = isLEDOn;

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            score = CalculateScore(isOutputCorrect, isGateCorrect);

            bool isComplete = isOutputCorrect && isGateCorrect;
            Debug.Log(isComplete ? $"‚úÖ ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score}" : $"‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score}");
        }
    }

    bool CheckGatePresence()
    {
        int requiredGateCount = 0;
        int foundGateCount = 0;

        if (requireAndGate) { requiredGateCount++; if (FindObjectsOfType<AndGate>().Length > 0) foundGateCount++; }
        if (requireOrGate) { requiredGateCount++; if (FindObjectsOfType<OrGate>().Length > 0) foundGateCount++; }
        if (requireNandGate) { requiredGateCount++; if (FindObjectsOfType<NandGate>().Length > 0) foundGateCount++; }
        if (requireNorGate) { requiredGateCount++; if (FindObjectsOfType<NorGate>().Length > 0) foundGateCount++; }
        if (requireXorGate) { requiredGateCount++; if (FindObjectsOfType<XorGate>().Length > 0) foundGateCount++; }
        if (requireXnorGate) { requiredGateCount++; if (FindObjectsOfType<XnorGate>().Length > 0) foundGateCount++; }
        if (requireNotGate) { requiredGateCount++; if (FindObjectsOfType<NotGate>().Length > 0) foundGateCount++; }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Gate ‡πÉ‡∏î ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô
        return requiredGateCount == 0 || foundGateCount > 0;
    }

    int CalculateScore(bool isOutputCorrect, bool isGateCorrect)
    {
        int baseScore = 0;

        if (isOutputCorrect)
        {
            baseScore += 30; // ‡∏ñ‡πâ‡∏≤ Output ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ 30 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        }
        else
        {
            baseScore -= 10; // ‡∏ñ‡πâ‡∏≤ Output ‡∏ú‡∏¥‡∏î ‡∏´‡∏±‡∏Å 10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        }

        if (isGateCorrect)
        {
            baseScore += 15; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Logic Gate ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ 15 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        }
        else if (requireAndGate || requireOrGate || requireNandGate || requireNorGate || requireXorGate || requireXnorGate || requireNotGate)
        {
            baseScore -= 10; // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Gate ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏¢ ‡∏´‡∏±‡∏Å 10 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        }

        return Mathf.Max(0, baseScore); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏¥‡∏î‡∏•‡∏ö
    }
}
